// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: allscenes.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package anime_scenes;

@kotlin.jvm.JvmName("-initializeallRankedScenes")
public inline fun allRankedScenes(block: anime_scenes.AllRankedScenesKt.Dsl.() -> kotlin.Unit): anime_scenes.Allscenes.AllRankedScenes =
  anime_scenes.AllRankedScenesKt.Dsl._create(anime_scenes.Allscenes.AllRankedScenes.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `anime_scenes.AllRankedScenes`
 */
public object AllRankedScenesKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: anime_scenes.Allscenes.AllRankedScenes.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: anime_scenes.Allscenes.AllRankedScenes.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): anime_scenes.Allscenes.AllRankedScenes = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ScenesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .anime_scenes.Scene scenes = 1;`
     */
     public val scenes: com.google.protobuf.kotlin.DslList<anime_scenes.Allscenes.Scene, ScenesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getScenesList()
      )
    /**
     * `repeated .anime_scenes.Scene scenes = 1;`
     * @param value The scenes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addScenes")
    public fun com.google.protobuf.kotlin.DslList<anime_scenes.Allscenes.Scene, ScenesProxy>.add(value: anime_scenes.Allscenes.Scene) {
      _builder.addScenes(value)
    }
    /**
     * `repeated .anime_scenes.Scene scenes = 1;`
     * @param value The scenes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignScenes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<anime_scenes.Allscenes.Scene, ScenesProxy>.plusAssign(value: anime_scenes.Allscenes.Scene) {
      add(value)
    }
    /**
     * `repeated .anime_scenes.Scene scenes = 1;`
     * @param values The scenes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllScenes")
    public fun com.google.protobuf.kotlin.DslList<anime_scenes.Allscenes.Scene, ScenesProxy>.addAll(values: kotlin.collections.Iterable<anime_scenes.Allscenes.Scene>) {
      _builder.addAllScenes(values)
    }
    /**
     * `repeated .anime_scenes.Scene scenes = 1;`
     * @param values The scenes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllScenes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<anime_scenes.Allscenes.Scene, ScenesProxy>.plusAssign(values: kotlin.collections.Iterable<anime_scenes.Allscenes.Scene>) {
      addAll(values)
    }
    /**
     * `repeated .anime_scenes.Scene scenes = 1;`
     * @param index The index to set the value at.
     * @param value The scenes to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setScenes")
    public operator fun com.google.protobuf.kotlin.DslList<anime_scenes.Allscenes.Scene, ScenesProxy>.set(index: kotlin.Int, value: anime_scenes.Allscenes.Scene) {
      _builder.setScenes(index, value)
    }
    /**
     * `repeated .anime_scenes.Scene scenes = 1;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearScenes")
    public fun com.google.protobuf.kotlin.DslList<anime_scenes.Allscenes.Scene, ScenesProxy>.clear() {
      _builder.clearScenes()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun anime_scenes.Allscenes.AllRankedScenes.copy(block: `anime_scenes`.AllRankedScenesKt.Dsl.() -> kotlin.Unit): anime_scenes.Allscenes.AllRankedScenes =
  `anime_scenes`.AllRankedScenesKt.Dsl._create(this.toBuilder()).apply { block() }._build()

